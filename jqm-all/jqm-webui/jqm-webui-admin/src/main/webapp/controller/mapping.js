'use strict';

var jqmControllers = angular.module('jqmControllers');

jqmControllers
		.controller(
				'µQueueMappingListCtrl',
				function($scope, $http, µQueueMappingDto, µQueueDto, µNodeService)
				{
					$scope.mappings = null;
					$scope.queues = null;
					$scope.nodes = null;
					$scope.sortvar = 'nId';
					$scope.selected = [];
					$scope.bDbBusy = false;

					$scope.newmapping = function()
					{
						$scope.mappings.push(new µQueueMappingDto(
						{
							nodeId : $scope.nodes[0].id,
							queueId : $scope.queues[0].id,
							nbThread : 10,
							pollingInterval : 60000,
						}));
						$scope.gridOptions.selectRow(1);
					};

					$scope.save = function()
					{
						// Save and refresh the table - ID may have been generated by the server.
						$scope.bDbBusy = true;
						µQueueMappingDto.saveAll(
						{}, $scope.mappings, $scope.refresh);
					};

					$scope.refresh = function()
					{
						console.debug('init');
						$scope.mappings = µQueueMappingDto.query();
						$scope.queues = µQueueDto.query();
						$scope.nodes = µNodeService.query();
						$scope.bDbBusy = false;
					};

					$scope.remove = function()
					{
						var q = null;
						for ( var i = 0; i < $scope.selected.length; i++)
						{
							q = $scope.selected[i];
							if (q.id !== null && q.id !== undefined)
							{
								q.$remove(
								{
									qId : q.id
								});
							}
							$scope.queues.splice($scope.queues.indexOf(q), 1);
						}
					};

					$scope.gridOptions =
					{
						data : 'mappings',
						enableCellSelection : true,
						enableRowSelection : true,
						enableCellEditOnFocus : true,
						multiSelect : true,
						showSelectionCheckbox : true,
						selectWithCheckboxOnly : true,
						selectedItems : $scope.selected,

						columnDefs : [
								{
									field : 'nodeId',
									displayName : 'Node',
									cellTemplate : '<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text>{{ (row.getProperty("nodeId") | getByProperty:"id":nodes).name }}</span></div>',
									editableCellTemplate : '<select ng-cell-input ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="q.id as q.name for q in nodes"></select>'
								},
								{
									field : 'queueId',
									displayName : 'Queue',
									cellTemplate : '<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text>{{ (row.getProperty("queueId") | getByProperty:"id":queues).name }}</span></div>',
									editableCellTemplate : '<select ng-cell-input ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="q.id as q.name for q in queues"></select>'
								},
								{
									field : 'pollingInterval',
									displayName : 'Polling Interval (ms)',
									editableCellTemplate : '<input ng-cell-input ng-input="COL_FIELD" ng-model="COL_FIELD" type="number" min="100" max="10000000" ng-required="true" ng-pattern="/^\\d+$/"  />',
								},
								{
									field : 'nbThread',
									displayName : 'Max concurrent running instances',
									editableCellTemplate : '<input ng-cell-input ng-input="COL_FIELD" ng-model="COL_FIELD" type="number" min="1" max="1000" ng-required="true" ng-pattern="/^\\d+$/"  />',
								}, ]
					};

					$scope.refresh();
				});

jqmControllers.filter('getByProperty', function()
{
	return function(propertyValue, propertyName, collection)
	{
		var i = 0, len = collection.length;
		for (; i < len; i++)
		{
			if (collection[i][propertyName] == +propertyValue)
			{
				return collection[i];
			}
		}
		return null;
	};
});